{"version":3,"sources":["Life.jsx","Word.jsx","Result.jsx","ButtonInput.jsx","HangmanGame.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Life","value","Word","word","Result","life","showWord","onReset","includes","type","onClick","style","height","width","fontSize","FlexBox","styled","div","FlexItem","button","ButtonInput","curChar","handleClick","event","target","textContent","map","x","key","HangmanGame","wordList","defaultLife","range","start","stop","step","Array","from","length","_","i","useState","setLife","Math","floor","random","setWord","usedChar","setUsedChar","charCodeAt","String","fromCharCode","setCurChar","time","setTime","isOn","setIsOn","createShowedWord","w","uC","tmp","forEach","useEffect","timer","setInterval","clearInterval","char","filter","defaultProps","App","toUpperCase","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.468264aa.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Life({ value }) {\n  return (\n    <div>\n      Current life:\n      {value}\n    </div>\n  );\n}\n\nLife.propTypes = {\n  value: PropTypes.number.isRequired,\n};\n\nexport default Life;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Word({ word }) {\n  return (\n    <div>\n      Current word:\n      {word}\n    </div>\n  );\n}\n\nWord.propTypes = {\n  word: PropTypes.string.isRequired,\n};\n\nexport default Word;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Result({ life, showWord, onReset }) {\n  return (\n    <div>\n      {life === 0 && <div>Lose</div>}\n      {!showWord.includes('*') && <div>Win</div>}\n      <button type=\"button\" onClick={onReset} style={{ height: '10vh', width: '10vh', fontSize: '3vh' }}>Again</button>\n    </div>\n  );\n}\n\nResult.propTypes = {\n  life: PropTypes.number.isRequired,\n  showWord: PropTypes.string.isRequired,\n  onReset: PropTypes.func.isRequired,\n};\n\nexport default Result;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst FlexBox = styled.div`display:flex;\nflex-wrap:wrap;\njustify-content:center;`;\nconst FlexItem = styled.button`\nfont-size:5vh;\nmin-width:10vh;\nmin-height:10vh;`;\nfunction ButtonInput({ curChar, onClick }) {\n  const handleClick = (event) => onClick(event.target.textContent);\n  return (\n    <FlexBox>{curChar.map((x) => <FlexItem key={x} onClick={handleClick}>{x}</FlexItem>)}</FlexBox>\n\n  );\n}\nButtonInput.propTypes = {\n  curChar: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ButtonInput;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Life from './Life';\nimport Word from './Word';\n\nimport Result from './Result';\nimport ButtonInput from './ButtonInput';\n\nexport default function HangmanGame({ wordList, defaultLife }) {\n  const range = (start, stop, step) => Array.from({ length: (stop - start) / step + 1 },\n    (_, i) => start + (i * step));\n  const [life, setLife] = useState(defaultLife);\n  const [word, setWord] = useState(wordList[Math.floor(Math.random() * wordList.length)]);\n  const [usedChar, setUsedChar] = useState([]);\n  const [curChar, setCurChar] = useState(range('A'.charCodeAt(0), 'Z'.charCodeAt(0), 1).map((x) => String.fromCharCode(x)));\n  const [time, setTime] = useState(0);\n  const [isOn, setIsOn] = useState(true);\n\n  function newGame() {\n    setLife(defaultLife);\n    setWord(wordList[Math.floor(Math.random() * wordList.length)]);\n    setUsedChar([]);\n    setCurChar(range('A'.charCodeAt(0), 'Z'.charCodeAt(0), 1).map((x) => String.fromCharCode(x)));\n    setTime(0);\n    setIsOn(true);\n  }\n  function createShowedWord(w, uC) {\n    let tmp = '';\n    if (uC === 1) { return tmp; }\n    [...w].forEach((x) => { tmp += uC.includes(x) ? x : '*'; });\n    return tmp;\n  }\n  function guess(char) {\n    setUsedChar([...usedChar, char]);\n    setCurChar(curChar.filter((x) => x !== char));\n\n    if (!word.includes(char)) setLife(life - 1);\n  }\n  useEffect(() => {\n    if ((life === 0 || !createShowedWord(word, usedChar).includes('*'))) setIsOn(false);\n    const timer = setInterval(() => { if (isOn) setTime(time + 1); }, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [time, isOn, life, usedChar, word]);\n  return (\n    <div>\n      Time:\n      {time}\n      <Life value={life} />\n      {life !== 0 ? <Word word={createShowedWord(word, usedChar)} /> : word}\n      {!(life === 0 || !createShowedWord(word, usedChar).includes('*'))\n        ? <ButtonInput curChar={curChar} onClick={guess} />\n        : <Result life={life} showWord={createShowedWord(word, usedChar)} onReset={newGame} />}\n    </div>\n\n  );\n}\nHangmanGame.propTypes = {\n  wordList: PropTypes.arrayOf(PropTypes.string).isRequired,\n  defaultLife: PropTypes.number,\n};\nHangmanGame.defaultProps = { defaultLife: 7 };\n","import React from 'react';\nimport './App.css';\nimport HangmanGame from './HangmanGame';\n\nfunction App() {\n  const wordList = ['king', 'flashlight', 'neophyte', 'medical', 'zephyr', 'cat', 'dog', 'furios'].map((x) => x.toUpperCase());\n\n  return (\n    <div className=\"App\">\n      <HangmanGame wordList={wordList} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}